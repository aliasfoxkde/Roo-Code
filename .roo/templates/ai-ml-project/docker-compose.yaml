version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    environment:
      - ENV=development
      - DATABASE_URL=postgresql://user:password@db:5432/ai_ml_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    networks:
      - ai-ml-network

  # Database service
  db:
    image: postgres:13
    environment:
      POSTGRES_DB: ai_ml_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ai-ml-network

  # Redis service for caching
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-ml-network

  # Jupyter notebook service for data exploration
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./src:/app/src
    environment:
      - JUPYTER_ENABLE_LAB=yes
    networks:
      - ai-ml-network

  # Model training service
  trainer:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./models:/app/models
    environment:
      - ENV=development
    command: python src/models/training.py
    networks:
      - ai-ml-network

  # Model serving service
  model-server:
    build:
      context: .
      dockerfile: Dockerfile.serving
    ports:
      - "5000:5000"
    volumes:
      - ./models:/app/models
    environment:
      - MODEL_PATH=/app/models
    networks:
      - ai-ml-network

  # Monitoring service
  prometheus:
    image: prom/prometheus:v2.30.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ai-ml-network

  # Visualization service
  grafana:
    image: grafana/grafana:8.1.5
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - ai-ml-network

# Define named volumes
volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

# Define networks
networks:
  ai-ml-network:
    driver: bridge