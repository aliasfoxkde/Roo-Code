## Hivemind (Roo Code Fork) Enhancement Plan

### Core Testing & Research
- **Primary Task**: Test the Hivemind VS Code Extension thoroughly to identify current capabilities and limitations
- **Research**: Investigate Kilo Code integration possibilities and compatibility with current architecture

### Feature Enhancements

#### Settings & Configuration
- **Prompt Batching**: Add settings panel options to configure prompt batching behavior (batch size, timeout, queue management)
- **Codebase Indexing**:
  - Integrate Supabase as vector database option alongside existing Qdrant support
  - Implement lightweight local embedding system using 384-dimensional models (e.g., all-MiniLM-L6-v2)
  - Add local vector database option for offline codebase indexing
- **Model Customization**:
  - Enable per-prompt model selection (separate models for code generation, analysis, documentation, etc.)
  - Add granular parameter controls for each model preset (temperature, top-p, max tokens, etc.)
- **Roo Rules Management**: Create dedicated settings section for modifying `.clinerules` and mode-specific rule files
- **Multi-Model Architecture**:
  - Allow separate model assignment for vision tasks, image generation, and computer use
  - Enable mixing of proprietary and open-source models based on capability requirements

#### Browser & Automation Integration
- **Built-in Browser Tools**: Integrate Puppeteer and Playwright directly into the extension, eliminating need for remote browser setup
- **Automation Controls**: Add native browser automation capabilities accessible through the tool system

#### Workflow & Interaction
- **Stage Triggers**: Implement action hooks for task lifecycle events (start, progress, completion, error)
- **Command Shortcuts**: Add `/y` and `/yes` flags for automatic command approval
- **Text-to-Speech Enhancements**:
  - Voice selection controls
  - Speed adjustment settings
  - System prompt customization for assistant persona
  - Audio output device selection

#### UI/UX Improvements
- **Power Steering Mode**:
  - Expand current experimental "power steering" functionality
  - Create dedicated tab/panel for power steering controls
  - Add advanced automation options
- **Settings Organization**:
  - Move "Enable concurrent file edits" to File Management section
  - Relocate MCP Server list, configuration, and marketplace to main settings
  - Improve settings categorization and navigation

### Default Configuration Changes
- **Mode Settings**: Set Code Mode as default startup mode
- **Auto-Approval**: Enable auto-approve for all command types by default
- **Command Permissions**: Add wildcard "*" to allowed applications list
- **Experimental Features**: Enable by default:
  - Concurrent file edits
  - Power steering mode
  - Other experimental options currently opt-in

### Prompt System Improvements
- **Built-in Prompt Library**: Include out-of-the-box custom prompts for:
  - Prompt enhancement and optimization
  - Code review and analysis
  - Documentation generation
  - Debugging assistance
- **System Prompt Enhancement**:
  - Add detailed tool usage instructions
  - Include task list creation guidance
  - Provide debugging methodology prompts
- **Variable System**: Implement prompt variables for:
  - Context management
  - Codebase indexing integration
  - Tool usage patterns
  - Dynamic content insertion
- **Validation Integration**: Build validation logic into system prompts for:
  - Linting checks
  - Test execution
  - Build verification
  - Console error monitoring

### Future Development (TBD)
- **Collaboration**: Multi-user workspace features
- **MCP Ecosystem**: Curated MCP Server presets with usage documentation
- **Vector Knowledge Base (VKB)**: Advanced memory and context management system for RAG capabilities
- **Data Export**: Complete conversation and task history export functionality
- **Event System**: Code-executable triggers (beyond AI prompts)
- **Distributed Computing**: Remote agent task delegation capabilities

### Out-of-the-Box (OOTB) Philosophy
All enhancements should prioritize immediate usability without complex setup:
- Local debugging tools ready on installation
- Local codebase indexing with embedded models
- Local orchestrator model for 24/7 autonomous operation
- Event-driven control system for continuous operation

## Terminal Application Issues

### Visual/Branding Updates
- Replace favicon and application icons with Hivemind branding
- Update placeholder text and UI elements to reflect Hivemind identity

### Critical Bugs (Build: https://84e32e16.qwen-terminal.pages.dev/)
- **Window Management**: Fix drag-and-drop functionality for window repositioning
- **Dropdown Behavior**: Resolve page reload issue when selecting Language or Theme options in Editor settings

### Priority
Address terminal bugs immediately as they impact core usability of the deployed application.
